News

  I have started updating the documentation to provide more of a user guide.
  The current version is at https://vim-vpe.readthedocs.io/en/userguide/.
  This is vey much a work in progress. It will definitely contain spelling
  errors and other mistakes, and I expect it to change quite a lot in the near
  future.

  A lot has been added since version 0.4, most significantly in areas that
  make writing and maintaining non-trivial plug-ins easier.

Requirements

  VPE requires a minimum of Vim 8.0.0700 and Python 3.6.

  VPE is tested on Linux and Windows 10. On Windows, testing is done using Vim
  8.2.1970 and Python 3.8.6. On Linux testing is done using
  Vim-8.0.0700/Python-3.6.0 and very recent versions of both vim and Python.

Status
    Although it has not yet reached a version 1.0 release, I believe that VPE
    is quite stable. I make heavy, daily use of VPE within my (Linux) Vim
    environment without problems.

    While the API should be considered unstable, it has actually proven fairly
    stable, with only a few, minor incompatible changes since version 0.1.

Introduction

  VPE adds to Vim’s built-in support for Python scripting. This is a brief list
  of VPE’s features.

  - A Vim class that provides an enhanced, drop-in replacement for the standard
    python-vim module.

  - Classes Window, Buffer, TabPage are enhanced wrappers around the standard
    vim versions.

  - Support for cleanly invoking Python functions for keyboard mappings, user
    defined commands and events.

    New in 0.5 is support for using Python decorators to set up these mappings.

  - Pythonic support for using popup-windows. (Requires Vim 8.2.)

  - Pythonic support for using timers; when a timer fires a Python function is
    invoked.

  - Pythonic support for channels.

  - Syntax class and supporting context managers to define highlighting.

  - Logging to a buffer. Useful when developing and debugging plug-ins.
    When active in a window, the window automatically scrolls to show new
    output.

  - A plug-in support mechanism. I find this more convenient for non-trivial
    Python based plug-ins.

  - Other relatively high level support for non-trivial plug-ins. This includes
    management of configuration values, scratch (display only) buffers,
    user-interface like components (panels and fields).

  The above just scratches the surface, see :help vpe.txt for detailed
  documentation or the more readable form at https://vim-vpe.readthedocs.io/.

Source code

  The source code is maintained at https://github.com/paul-ollis/vim-vpe.git.
  You can raise bugs or feature requests there.

Quick start

  The quickest way to start using VPE is to import the vim object:

    from vpe import vim

  The vim object is an instance of the Vim class and is intended to be a drop
  in replacement for Vim’s standard python-vim module, but with a number of
  enhancements.

  - Most of Vim’s functions appear as members, for example:

      vim.cursor(4, 10)            # Position cursor at row 4, column 10.
      m = vim.execute('messages')  # Get all the recent Vim messages.

  - The attributes buffers, current, options, tabpages, vars, vvars and
    windows provide enhanced access to the corresponding Vim objects. For
    example vim.current.buffer provides a Buffer instance in place of Vim’s
    standard python-buffer.

  - The Vim registers are available using the registers attribute.

  - When errors occur a VimError is raised, which provides a better
    breakdown of the error. This is a subclass of vim.error so existing
    code that catches vim.error still works.

Examples

  Please treat the examples as demo, minimally tested code.

  The examples provided with VPE are:

    vpe_filenav - start with, ':runtime examples/vpe_filenav.vim'

      A very simple file explorer that can be used to open files.

    vpe_bufnav - start with, ':runtime examples/vpe_bufnav.vim'

      An explorer for buffers. This is heavily inspired by Jeff
      Lanzarotta's excellent vimscript #42, but it does not attempt to be
      a clone.

Installation

  The VPE directory tree is structured as a package with a single plugin.
  Assuming your Vim files are in the “~/.vim” directory, add a “pack” sub-
  directory and install VPE into the “~/.vim/pack” directory.

      $ cd ~/.vim/pack
      $ unzip vim-vpe.zip

  This will create a vim-vpe directory. The most significant sub-directories
  within vim-vpe are:

  vpe
      The vpe package itself.

  docs/html
      The VPE documentation in HTML format. I find this easier to read, but less
      convenient than the help.

  start/vpe/doc
      Contains the VPE help file plus pre-generated tags.

  start/vpe/examples
      Some examples, intended as an aid to learning what you can do with VPE.

  start/vpe/plugin
      Containes the vpe.vim start up script, which initialises support for
      importing and using the vpe package.

  You can clone this into ~/.vim/pack, but that will, currently, not include the
  Vim help file.
